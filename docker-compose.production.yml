version: '3.8'

services:
  # Main application
  data-pipeline-app:
    build: 
      context: .
      target: production
    image: data-pipeline:latest
    container_name: data-pipeline-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=data_warehouse
      - DB_USER=pipeline_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - MONITORING_ENABLED=true
    secrets:
      - db_password
      - app_secret_key
    networks:
      - data-pipeline-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/api/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Web interface
  data-pipeline-web:
    build: 
      context: .
      target: web
    image: data-pipeline-web:latest
    container_name: data-pipeline-web
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - API_BASE_URL=http://data-pipeline-app:8080
      - ENVIRONMENT=production
    networks:
      - data-pipeline-network
    depends_on:
      - data-pipeline-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Monitoring dashboard
  data-pipeline-dashboard:
    build: 
      context: .
      target: monitoring
    image: data-pipeline-dashboard:latest
    container_name: data-pipeline-dashboard
    restart: unless-stopped
    ports:
      - "8050:8050"
    environment:
      - METRICS_SOURCE=http://data-pipeline-app:8080/api/metrics
      - ENVIRONMENT=production
    networks:
      - data-pipeline-network
    depends_on:
      - data-pipeline-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Queue processor workers
  data-pipeline-worker:
    build: 
      context: .
      target: worker
    image: data-pipeline-worker:latest
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=data_warehouse
      - DB_USER=pipeline_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_URL=redis://redis:6379/0
      - WORKER_CONCURRENCY=4
      - QUEUE_POLL_INTERVAL=10
    secrets:
      - db_password
    networks:
      - data-pipeline-network
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 4G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: data-pipeline-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=data_warehouse
      - POSTGRES_USER=pipeline_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - data-pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipeline_user -d data_warehouse"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: data-pipeline-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - data-pipeline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: data-pipeline-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - data-pipeline-network
    depends_on:
      - data-pipeline-web
      - data-pipeline-dashboard
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: data-pipeline-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - data-pipeline-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: data-pipeline-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - data-pipeline-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: data-pipeline-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - data-pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: data-pipeline-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - data-pipeline-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q '\"overall\":{\"level\":\"available\"}'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backup service
  backup:
    build: 
      context: .
      target: backup
    image: data-pipeline-backup:latest
    container_name: data-pipeline-backup
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=data_warehouse
      - DB_USER=pipeline_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=data-pipeline-backups
    secrets:
      - db_password
      - aws_credentials
    volumes:
      - backup_data:/backups
    networks:
      - data-pipeline-network
    depends_on:
      - postgres

networks:
  data-pipeline-network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local
  backup_data:
    driver: local

secrets:
  db_password:
    external: true
  app_secret_key:
    external: true
  grafana_password:
    external: true
  aws_credentials:
    external: true